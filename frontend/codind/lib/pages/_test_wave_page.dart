///  https://zhuanlan.zhihu.com/p/63825915

import 'dart:math';

import 'package:flutter/material.dart';

import 'dart:ui' as ui;

///
///  this code is generated by https://fluttershapemaker.com/
class RPSCustomPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    Path path_0 = Path();
    path_0.moveTo(0, 0);
    path_0.lineTo(0, size.height);
    path_0.lineTo(size.width, size.height);
    path_0.lineTo(size.width, 0);
    path_0.close();
    path_0.moveTo(size.width * 0.5128868, size.height * 0.01881135);
    path_0.arcToPoint(Offset(size.width * 0.4381083, size.height * 0.09357945),
        radius: Radius.elliptical(
            size.width * 0.07476810, size.height * 0.07476810),
        rotation: 0,
        largeArc: true,
        clockwise: true);
    path_0.arcToPoint(Offset(size.width * 0.5128868, size.height * 0.01881135),
        radius: Radius.elliptical(
            size.width * 0.07476810, size.height * 0.07476810),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.close();
    path_0.moveTo(size.width * 0.6834444, size.height * 0.3457428);
    path_0.lineTo(size.width * 0.6834444, size.height * 0.4970014);
    path_0.arcToPoint(Offset(size.width * 0.6480110, size.height * 0.5324348),
        radius: Radius.elliptical(
            size.width * 0.03543340, size.height * 0.03543340),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.arcToPoint(Offset(size.width * 0.6248003, size.height * 0.5092137),
        radius: Radius.elliptical(
            size.width * 0.02321069, size.height * 0.02321069),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.lineTo(size.width * 0.6248003, size.height * 0.3457428);
    path_0.lineTo(size.width * 0.6111353, size.height * 0.3457428);
    path_0.lineTo(size.width * 0.6111353, size.height * 0.9287701);
    path_0.arcToPoint(Offset(size.width * 0.5744776, size.height * 0.9654174),
        radius: Radius.elliptical(
            size.width * 0.03665774, size.height * 0.03665774),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.lineTo(size.width * 0.5744776, size.height * 0.9654174);
    path_0.arcToPoint(Offset(size.width * 0.5378302, size.height * 0.9287701),
        radius: Radius.elliptical(
            size.width * 0.03664737, size.height * 0.03664737),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.lineTo(size.width * 0.5378302, size.height * 0.5969412);
    path_0.lineTo(size.width * 0.4855361, size.height * 0.5969412);
    path_0.lineTo(size.width * 0.4855361, size.height * 0.9287701);
    path_0.arcToPoint(Offset(size.width * 0.4122310, size.height * 0.9287701),
        radius: Radius.elliptical(
            size.width * 0.03665774, size.height * 0.03665774),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.lineTo(size.width * 0.4122310, size.height * 0.3457428);
    path_0.lineTo(size.width * 0.3985246, size.height * 0.3457428);
    path_0.lineTo(size.width * 0.3985246, size.height * 0.5092137);
    path_0.arcToPoint(Offset(size.width * 0.3753139, size.height * 0.5324348),
        radius: Radius.elliptical(
            size.width * 0.02321069, size.height * 0.02321069),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.arcToPoint(Offset(size.width * 0.3398805, size.height * 0.4970014),
        radius: Radius.elliptical(
            size.width * 0.03543340, size.height * 0.03543340),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.lineTo(size.width * 0.3398805, size.height * 0.2384777);
    path_0.arcToPoint(Offset(size.width * 0.3953184, size.height * 0.1830086),
        radius: Radius.elliptical(
            size.width * 0.05547947, size.height * 0.05547947),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.lineTo(size.width * 0.6279441, size.height * 0.1830086);
    path_0.arcToPoint(Offset(size.width * 0.6834132, size.height * 0.2384777),
        radius: Radius.elliptical(
            size.width * 0.05547947, size.height * 0.05547947),
        rotation: 0,
        largeArc: false,
        clockwise: true);
    path_0.close();

    Paint paint_0_fill = Paint()..style = PaintingStyle.fill;
    paint_0_fill.color = Color(0xffffffff).withOpacity(1.0);
    canvas.drawPath(path_0, paint_0_fill);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true;
  }
}

abstract class BasePainter extends CustomPainter {
  late Animation<double> _xAnimation;
  late Animation<double> _yAnimation;

  set XAnimation(Animation<double> value) {
    _xAnimation = value;
  }

  set YAnimation(Animation<double> value) {
    _yAnimation = value;
  }

  Animation<double> get YAnimation => _yAnimation;

  Animation<double> get XAnimation => _xAnimation;
}

class WavePainter extends BasePainter {
  int waveCount;
  int crestCount;
  double? waveHeight;
  List<Color>? waveColors;
  double circleWidth;
  Color circleColor;
  Color circleBackgroundColor;
  bool showProgressText;
  TextStyle textStyle;

  WavePainter(
      {this.waveCount = 1,
      this.crestCount = 2,
      this.waveHeight,
      this.waveColors,
      this.circleColor = Colors.grey,
      this.circleBackgroundColor = Colors.white,
      this.circleWidth = 5.0,
      this.showProgressText = true,
      this.textStyle = const TextStyle(
        fontSize: 60.0,
        color: Colors.blue,
        fontWeight: FontWeight.bold,
        shadows: [
          Shadow(color: Colors.grey, offset: Offset(5.0, 5.0), blurRadius: 5.0)
        ],
      )});

  @override
  void paint(Canvas canvas, Size size) {
    // print(size);
    double width = size.width;
    double height = size.height;

    // print(width);

    if (waveHeight == null) {
      waveHeight = height / 10;
      height = height + waveHeight!;
    }

    waveColors ??= [
      Color.fromARGB(100, Colors.blue.red, Colors.blue.green, Colors.blue.blue)
    ];

    Offset center = Offset(width / 2, height / 2);
    double xMove = width * XAnimation.value;
    double yAnimValue = 0.0;
    if (YAnimation != null) {
      yAnimValue = YAnimation.value;
    }
    double yMove = height * (1.0 - yAnimValue);
    Offset waveCenter = Offset(xMove, yMove);

    var paintCircle = Paint()
      ..color = Colors.grey
      ..style = PaintingStyle.fill
      ..strokeWidth = circleWidth
      ..maskFilter = const MaskFilter.blur(BlurStyle.inner, 5.0);

//    canvas.drawCircle(center, min(width, height) / 2, paintCircle);

    List<Path> wavePaths = [];

    for (int index = 0; index < waveCount; index++) {
      double direction = pow(-1.0, index).toDouble();
      Path path = Path()
        ..moveTo(waveCenter.dx - width, waveCenter.dy)
        ..lineTo(waveCenter.dx - width, center.dy + height / 2)
        ..lineTo(waveCenter.dx + width, center.dy + height / 2)
        ..lineTo(waveCenter.dx + width, waveCenter.dy);

      for (int i = 0; i < 2; i++) {
        for (int j = 0; j < crestCount; j++) {
          double a = pow(-1.0, j).toDouble();
          path.quadraticBezierTo(
              waveCenter.dx + width * (1 - i - (1 + 2 * j) / (2 * crestCount)),
              waveCenter.dy + waveHeight! * a * direction,
              waveCenter.dx + width * (1 - i - (2 + 2 * j) / (2 * crestCount)),
              waveCenter.dy);
        }
      }

      path.close();

      wavePaths.add(path);
    }
    var paint = Paint()
      ..color = circleBackgroundColor
      ..style = PaintingStyle.fill
      ..maskFilter = const MaskFilter.blur(BlurStyle.inner, 5.0);

    canvas.saveLayer(
        Rect.fromCircle(center: center, radius: min(width, height) / 2), paint);

//    canvas.drawCircle(center, min(width, height) / 2, paint);

    paint
//      ..blendMode = BlendMode.srcATop
      ..style = PaintingStyle.fill
      ..strokeWidth = 2.0
      ..maskFilter = const MaskFilter.blur(BlurStyle.inner, 10.0);

    for (int i = 0; i < wavePaths.length; i++) {
      if (waveColors!.length >= wavePaths.length) {
        paint.color = waveColors![i];
      } else {
        paint.color = waveColors![0];
      }
      canvas.drawPath(wavePaths[i], paint);
    }
//    paint.blendMode = BlendMode.srcATop;
    // if (showProgressText) {
    //   TextPainter tp = TextPainter(
    //       text: TextSpan(
    //           text: '${(yAnimValue * 100.0).toStringAsFixed(0)}%',
    //           style: textStyle),
    //       textDirection: TextDirection.rtl)
    //     ..layout();

    // tp.paint(
    //     canvas, Offset(center.dx - tp.width / 2, center.dy - tp.height / 2));
    // }

    RPSCustomPainter().paint(canvas, Size(size.width, size.height));
    canvas.restore();
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return oldDelegate != this;
  }
}

abstract class BasePainterFactory {
  BasePainter getPainter();
}

class WavePainterFactory extends BasePainterFactory {
  @override
  BasePainter getPainter() {
    return WavePainter(
      waveCount: 1,
      waveColors: [
        Colors.lightBlueAccent[200]!,
      ],
      textStyle: TextStyle(
        fontSize: 60.0,
        foreground: Paint()
          ..color = Colors.lightBlue
          ..style = PaintingStyle.fill
          ..strokeWidth = 2.0
          ..blendMode = BlendMode.difference
          ..colorFilter =
              const ColorFilter.mode(Colors.white, BlendMode.exclusion)
          ..maskFilter = const MaskFilter.blur(BlurStyle.solid, 1.0),
        fontWeight: FontWeight.bold,
      ),
    );
  }
}

class ProgressManager extends StatefulWidget {
  double width;
  double height;
  ProgressManager({Key? key, required this.width, required this.height})
      : super(key: key);

  @override
  _ProgressManagerState createState() =>
      _ProgressManagerState().._factory = WavePainterFactory();
}

class _ProgressManagerState extends State<ProgressManager>
    with TickerProviderStateMixin {
  late AnimationController xController;
  late AnimationController yController;
  late Animation<double> xAnimation;
  late Animation<double> yAnimation;
  List<double> _progressList = [];
  double curProgress = 0;
  late BasePainterFactory _factory;

  set painter(BasePainterFactory factory) {
    _factory = factory;
  }

  setProgress(double progress) {
    _progressList.add(progress);
    onProgressChange();
  }

  onProgressChange() {
    if (_progressList.isNotEmpty) {
      if (yController != null && yController.isAnimating) {
        return;
      }
      double nextProgress = _progressList[0];
      _progressList.removeAt(0);
      final double begin = curProgress;
      yController = AnimationController(
          vsync: this, duration: const Duration(milliseconds: 1000));
      yAnimation = Tween(begin: begin, end: nextProgress).animate(yController);
      yAnimation.addListener(_onProgressChange);
      yAnimation.addStatusListener(_onProgressStatusChange);
      yController.forward();
    }
  }

  @override
  void initState() {
    super.initState();
    xController = AnimationController(
        vsync: this, duration: const Duration(milliseconds: 4000));
    xAnimation = Tween(begin: 0.0, end: 1.0).animate(xController);
    xAnimation.addListener(_change);
    yController = AnimationController(
        vsync: this, duration: const Duration(milliseconds: 5000));
    yAnimation = Tween(begin: 0.0, end: 1.0).animate(yController);
    yAnimation.addListener(_onProgressChange);
    yAnimation.addStatusListener(_onProgressStatusChange);

    doDelay(xController, 0);

    Future.delayed(const Duration(milliseconds: 3000), () {
      setProgress(0.66);
    });
  }

  @override
  Widget build(BuildContext context) {
    // print(MediaQuery.of(context).size.width);
    // print(MediaQuery.of(context).size.height);

    return Container(
      color: Colors.grey[300],
      // width: MediaQuery.of(context).size.width,
      // height: MediaQuery.of(context).size.height,
      width: widget.width,
      height: widget.height,
      child: CustomPaint(
        painter: _factory.getPainter()
          ..XAnimation = xAnimation
          ..YAnimation = yAnimation,
        size: Size(widget.width, widget.height),
      ),
    );
  }

  void _change() {
    setState(() {});
  }

  void _onProgressChange() {
    setState(() {
      curProgress = yAnimation.value;
    });
  }

  void _onProgressStatusChange(status) {
    if (status == AnimationStatus.completed) {
      onProgressChange();
    }
  }

  void doDelay(AnimationController controller, int delay) async {
    Future.delayed(Duration(milliseconds: delay), () {
      controller.repeat();
    });
  }

  @override
  void dispose() {
    xController.dispose();
    yController.dispose();
    xAnimation.removeListener(_change);
    yAnimation.removeListener(_onProgressChange);
    yAnimation.removeStatusListener(_onProgressStatusChange);
    super.dispose();
  }
}

class TestWavePage extends StatelessWidget {
  const TestWavePage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ProgressManager(
        width: MediaQuery.of(context).size.width,
        height: MediaQuery.of(context).size.height,
      ),
    );
  }
}
